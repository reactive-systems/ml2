# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ml2.grpc.ltl import ltl_syn_pb2 as ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2
from ml2.grpc.tools import tools_pb2 as ml2_dot_grpc_dot_tools_dot_tools__pb2


class NeuroSyntStub(object):
    """message SetupMessage {
    int32 mc_port = 1;
    int32 beam_size = 2;
    string model = 3;
    string verifier = 4;
    int32 batch_size = 5;
    float alpha = 6;
    int32 num_properties = 7;
    int32 length_properties = 8;
    }

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Setup = channel.unary_unary(
                '/NeuroSynt/Setup',
                request_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupResponse.FromString,
                )
        self.Identify = channel.unary_unary(
                '/NeuroSynt/Identify',
                request_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationResponse.FromString,
                )
        self.Synthesize = channel.unary_unary(
                '/NeuroSynt/Synthesize',
                request_serializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.LTLSynProblem.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.NeuralLTLSynSolution.FromString,
                )
        self.SynthesizeStream = channel.stream_stream(
                '/NeuroSynt/SynthesizeStream',
                request_serializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.LTLSynProblem.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.NeuralLTLSynSolution.FromString,
                )
        self.SynthesizeBatch = channel.stream_stream(
                '/NeuroSynt/SynthesizeBatch',
                request_serializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.LTLSynProblem.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.NeuralLTLSynSolutionSpecPair.FromString,
                )


class NeuroSyntServicer(object):
    """message SetupMessage {
    int32 mc_port = 1;
    int32 beam_size = 2;
    string model = 3;
    string verifier = 4;
    int32 batch_size = 5;
    float alpha = 6;
    int32 num_properties = 7;
    int32 length_properties = 8;
    }

    """

    def Setup(self, request, context):
        """Setup call, which is typically called before the first model checking call
        has happened.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Identify(self, request, context):
        """Call to find out the identity and functionality of the server, i.e. the
        tool that is running the server and what it is supposed to do.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Synthesize(self, request, context):
        """Call to synthesize a single LTL specification
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SynthesizeStream(self, request_iterator, context):
        """Call to synthesize a stream of LTL specifications. Same order  of problems
        and solutions is assumed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SynthesizeBatch(self, request_iterator, context):
        """Call to synthesize a stream of LTL specifications batch-wise. Same order is
        not guaranteed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NeuroSyntServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Setup': grpc.unary_unary_rpc_method_handler(
                    servicer.Setup,
                    request_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupResponse.SerializeToString,
            ),
            'Identify': grpc.unary_unary_rpc_method_handler(
                    servicer.Identify,
                    request_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationResponse.SerializeToString,
            ),
            'Synthesize': grpc.unary_unary_rpc_method_handler(
                    servicer.Synthesize,
                    request_deserializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.LTLSynProblem.FromString,
                    response_serializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.NeuralLTLSynSolution.SerializeToString,
            ),
            'SynthesizeStream': grpc.stream_stream_rpc_method_handler(
                    servicer.SynthesizeStream,
                    request_deserializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.LTLSynProblem.FromString,
                    response_serializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.NeuralLTLSynSolution.SerializeToString,
            ),
            'SynthesizeBatch': grpc.stream_stream_rpc_method_handler(
                    servicer.SynthesizeBatch,
                    request_deserializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.LTLSynProblem.FromString,
                    response_serializer=ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.NeuralLTLSynSolutionSpecPair.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NeuroSynt', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NeuroSynt(object):
    """message SetupMessage {
    int32 mc_port = 1;
    int32 beam_size = 2;
    string model = 3;
    string verifier = 4;
    int32 batch_size = 5;
    float alpha = 6;
    int32 num_properties = 7;
    int32 length_properties = 8;
    }

    """

    @staticmethod
    def Setup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NeuroSynt/Setup',
            ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupRequest.SerializeToString,
            ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Identify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NeuroSynt/Identify',
            ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationRequest.SerializeToString,
            ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Synthesize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NeuroSynt/Synthesize',
            ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.LTLSynProblem.SerializeToString,
            ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.NeuralLTLSynSolution.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SynthesizeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/NeuroSynt/SynthesizeStream',
            ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.LTLSynProblem.SerializeToString,
            ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.NeuralLTLSynSolution.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SynthesizeBatch(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/NeuroSynt/SynthesizeBatch',
            ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.LTLSynProblem.SerializeToString,
            ml2_dot_grpc_dot_ltl_dot_ltl__syn__pb2.NeuralLTLSynSolutionSpecPair.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
