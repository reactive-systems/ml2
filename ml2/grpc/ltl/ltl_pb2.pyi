"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class LTLFormula(google.protobuf.message.Message):
    """Mirrors ml2.ltl.ltl_formula.LTLFormula"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FORMULA_FIELD_NUMBER: builtins.int
    NOTATION_FIELD_NUMBER: builtins.int
    formula: builtins.str
    """Represents an LTL formula as string.
    TODO allowed operator symbols
    """
    notation: builtins.str
    """The notation in which the formula is serialized. Infix is default."""
    def __init__(
        self,
        *,
        formula: builtins.str = ...,
        notation: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["formula", b"formula", "notation", b"notation"]) -> None: ...

global___LTLFormula = LTLFormula

@typing.final
class LTLProperties(google.protobuf.message.Message):
    """Represents a set of LTL properties.
    Mirrors ml2.ltl.ltl_spec.ltl_properties.LTLProperties
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    SUB_EXPRS_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SEMANTICS_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the property. Can be arbitrary."""
    semantics: builtins.str
    """The semantics of the property. Usually "mealy" or "moore"."""
    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """All input atomic propositions that occur in guarantees or assumptions. Can
        be a superset thereof.
        """

    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """All output atomic propositions that occur in guarantees or assumptions.
        Can be a superset thereof.
        """

    @property
    def sub_exprs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LTLSpecification]:
        """The LTL specs that represent each property."""

    def __init__(
        self,
        *,
        inputs: collections.abc.Iterable[builtins.str] | None = ...,
        outputs: collections.abc.Iterable[builtins.str] | None = ...,
        sub_exprs: collections.abc.Iterable[global___LTLSpecification] | None = ...,
        name: builtins.str | None = ...,
        semantics: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_name", b"_name", "_semantics", b"_semantics", "name", b"name", "semantics", b"semantics"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_name", b"_name", "_semantics", b"_semantics", "inputs", b"inputs", "name", b"name", "outputs", b"outputs", "semantics", b"semantics", "sub_exprs", b"sub_exprs"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_name", b"_name"]) -> typing.Literal["name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_semantics", b"_semantics"]) -> typing.Literal["semantics"] | None: ...

global___LTLProperties = LTLProperties

@typing.final
class DecompLTLSpecification(google.protobuf.message.Message):
    """Represents a decompositioned LTL specification. Can be composed to an LTL
    specification as follows
    (assumption_1 ∧ ... ∧ assumption_n) → (guarantee_1 ∧ ... ∧ guarantee_m)
    Mirrors ml2.ltl.ltl_spec.decomp_ltl_spec.DecompLTLSpec
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    GUARANTEES_FIELD_NUMBER: builtins.int
    ASSUMPTIONS_FIELD_NUMBER: builtins.int
    GUARANTEE_PROPERTIES_FIELD_NUMBER: builtins.int
    ASSUMPTION_PROPERTIES_FIELD_NUMBER: builtins.int
    SEMANTICS_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    semantics: builtins.str
    """The semantics of the specification. Usually "mealy" or "moore"."""
    name: builtins.str
    """The name of the specification. Can be arbitrary."""
    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """All input atomic propositions that occur in guarantees or assumptions. Can
        be a superset thereof.
        """

    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """All output atomic propositions that occur in guarantees or assumptions.
        Can be a superset thereof.
        """

    @property
    def guarantees(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LTLFormula]:
        """DEPRECATED A set of guarantees that make up the specifications. All inputs
        and outputs occurring in any guarantee must be part of input/output.
        """

    @property
    def assumptions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LTLFormula]:
        """DEPRECATED A set of assumption that make up the specifications. All inputs
        and outputs occurring in any guarantee must be part of input/output.
        """

    @property
    def guarantee_properties(self) -> global___LTLProperties:
        """A set of guarantees that make up the specifications. All inputs and outputs
        occurring in any guarantee must be part of input/output.
        """

    @property
    def assumption_properties(self) -> global___LTLProperties:
        """A set of assumption that make up the specifications. All inputs and outputs
        occurring in any guarantee must be part of input/output.
        """

    def __init__(
        self,
        *,
        inputs: collections.abc.Iterable[builtins.str] | None = ...,
        outputs: collections.abc.Iterable[builtins.str] | None = ...,
        guarantees: collections.abc.Iterable[global___LTLFormula] | None = ...,
        assumptions: collections.abc.Iterable[global___LTLFormula] | None = ...,
        guarantee_properties: global___LTLProperties | None = ...,
        assumption_properties: global___LTLProperties | None = ...,
        semantics: builtins.str | None = ...,
        name: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_name", b"_name", "_semantics", b"_semantics", "assumption_properties", b"assumption_properties", "guarantee_properties", b"guarantee_properties", "name", b"name", "semantics", b"semantics"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_name", b"_name", "_semantics", b"_semantics", "assumption_properties", b"assumption_properties", "assumptions", b"assumptions", "guarantee_properties", b"guarantee_properties", "guarantees", b"guarantees", "inputs", b"inputs", "name", b"name", "outputs", b"outputs", "semantics", b"semantics"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_name", b"_name"]) -> typing.Literal["name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_semantics", b"_semantics"]) -> typing.Literal["semantics"] | None: ...

global___DecompLTLSpecification = DecompLTLSpecification

@typing.final
class LTLSpecification(google.protobuf.message.Message):
    """Represents an LTL specification. Not decomposed!
    Mirrors ml2.ltl.ltl_spec.ltl_spec.LTLSpec
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    FORMULA_FIELD_NUMBER: builtins.int
    SEMANTICS_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    semantics: builtins.str
    """The semantics of the specification. Usually "mealy" or "moore"."""
    name: builtins.str
    """The name of the specification. Can be arbitrary."""
    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """All input atomic propositions that occur in formula. Can be a superset
        thereof.
        """

    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """All output atomic propositions that occur in formula. Can be a superset
        thereof.
        """

    @property
    def formula(self) -> global___LTLFormula:
        """The LTL formula that represents the specification."""

    def __init__(
        self,
        *,
        inputs: collections.abc.Iterable[builtins.str] | None = ...,
        outputs: collections.abc.Iterable[builtins.str] | None = ...,
        formula: global___LTLFormula | None = ...,
        semantics: builtins.str | None = ...,
        name: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_name", b"_name", "_semantics", b"_semantics", "formula", b"formula", "name", b"name", "semantics", b"semantics"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_name", b"_name", "_semantics", b"_semantics", "formula", b"formula", "inputs", b"inputs", "name", b"name", "outputs", b"outputs", "semantics", b"semantics"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_name", b"_name"]) -> typing.Literal["name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_semantics", b"_semantics"]) -> typing.Literal["semantics"] | None: ...

global___LTLSpecification = LTLSpecification
