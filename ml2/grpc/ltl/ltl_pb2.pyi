"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class LTLFormula(google.protobuf.message.Message):
    """Mirrors ml2.ltl.ltl_formula.LTLFormula"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FORMULA_FIELD_NUMBER: builtins.int
    NOTATION_FIELD_NUMBER: builtins.int
    formula: builtins.str
    """Represents an LTL formula as string.
    TODO allowed operator symbols
    """
    notation: builtins.str
    """The notation in which the formula is serialized. Infix is default."""
    def __init__(
        self,
        *,
        formula: builtins.str = ...,
        notation: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["formula", b"formula", "notation", b"notation"]) -> None: ...

global___LTLFormula = LTLFormula

@typing_extensions.final
class DecompLTLSpecification(google.protobuf.message.Message):
    """Represents a decompositioned LTL specification. Can be composed to an LTL
    specification as follows
    (assumption_1 ∧ ... ∧ assumption_n) → (guarantee_1 ∧ ... ∧ guarantee_m)
    Mirrors ml2.ltl.ltl_spec.decomp_ltl_spec.DecompLTLSpec
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    GUARANTEES_FIELD_NUMBER: builtins.int
    ASSUMPTIONS_FIELD_NUMBER: builtins.int
    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """All input atomic propositions that occur in guarantees or assumptions. Can
        be a superset thereof.
        """
    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """All output atomic propositions that occur in guarantees or assumptions.
        Can be a superset thereof.
        """
    @property
    def guarantees(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LTLFormula]:
        """A set of guarantees that make up the specifications. All inputs and outputs
        occuring in any guarantee must be part of input/output.
        """
    @property
    def assumptions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LTLFormula]:
        """A set of assumption that make up the specifications. All inputs and outputs
        occuring in any guarantee must be part of input/output.
        """
    def __init__(
        self,
        *,
        inputs: collections.abc.Iterable[builtins.str] | None = ...,
        outputs: collections.abc.Iterable[builtins.str] | None = ...,
        guarantees: collections.abc.Iterable[global___LTLFormula] | None = ...,
        assumptions: collections.abc.Iterable[global___LTLFormula] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["assumptions", b"assumptions", "guarantees", b"guarantees", "inputs", b"inputs", "outputs", b"outputs"]) -> None: ...

global___DecompLTLSpecification = DecompLTLSpecification

@typing_extensions.final
class LTLSpecification(google.protobuf.message.Message):
    """Represents an LTL specification. Not decomposed!
    Mirrors ml2.ltl.ltl_spec.ltl_spec.LTLSpec
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    FORMULA_FIELD_NUMBER: builtins.int
    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """All input atomic propositions that occur in formula. Can be a superset
        thereof.
        """
    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """All output atomic propositions that occur in formula. Can be a superset
        thereof.
        """
    @property
    def formula(self) -> global___LTLFormula: ...
    def __init__(
        self,
        *,
        inputs: collections.abc.Iterable[builtins.str] | None = ...,
        outputs: collections.abc.Iterable[builtins.str] | None = ...,
        formula: global___LTLFormula | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["formula", b"formula"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["formula", b"formula", "inputs", b"inputs", "outputs", b"outputs"]) -> None: ...

global___LTLSpecification = LTLSpecification
