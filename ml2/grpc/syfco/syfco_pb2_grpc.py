# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ml2.grpc.syfco import syfco_pb2 as ml2_dot_grpc_dot_syfco_dot_syfco__pb2
from ml2.grpc.tools import tools_pb2 as ml2_dot_grpc_dot_tools_dot_tools__pb2


class SyfcoStub(object):
    """Syfco: A tool for reading, manipulating and transforming synthesis
    specifications in TLSF. is a tool
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Setup = channel.unary_unary(
                '/Syfco/Setup',
                request_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupResponse.FromString,
                )
        self.Identify = channel.unary_unary(
                '/Syfco/Identify',
                request_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationResponse.FromString,
                )
        self.ConvertTLSFToSpec = channel.unary_unary(
                '/Syfco/ConvertTLSFToSpec',
                request_serializer=ml2_dot_grpc_dot_syfco_dot_syfco__pb2.ConvertTLSFToSpecRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_syfco_dot_syfco__pb2.ConvertTLSFToSpecResponse.FromString,
                )


class SyfcoServicer(object):
    """Syfco: A tool for reading, manipulating and transforming synthesis
    specifications in TLSF. is a tool
    """

    def Setup(self, request, context):
        """Setup call, which is typically called before the first model checking call
        has happened.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Identify(self, request, context):
        """Call to find out the identity and functionality of the server, i.e. the
        tool that is running the server and what it is supposed to do.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertTLSFToSpec(self, request, context):
        """Call to synthesize a single LTL specification
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SyfcoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Setup': grpc.unary_unary_rpc_method_handler(
                    servicer.Setup,
                    request_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupResponse.SerializeToString,
            ),
            'Identify': grpc.unary_unary_rpc_method_handler(
                    servicer.Identify,
                    request_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationResponse.SerializeToString,
            ),
            'ConvertTLSFToSpec': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertTLSFToSpec,
                    request_deserializer=ml2_dot_grpc_dot_syfco_dot_syfco__pb2.ConvertTLSFToSpecRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_syfco_dot_syfco__pb2.ConvertTLSFToSpecResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Syfco', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Syfco(object):
    """Syfco: A tool for reading, manipulating and transforming synthesis
    specifications in TLSF. is a tool
    """

    @staticmethod
    def Setup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Syfco/Setup',
            ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupRequest.SerializeToString,
            ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Identify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Syfco/Identify',
            ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationRequest.SerializeToString,
            ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertTLSFToSpec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Syfco/ConvertTLSFToSpec',
            ml2_dot_grpc_dot_syfco_dot_syfco__pb2.ConvertTLSFToSpecRequest.SerializeToString,
            ml2_dot_grpc_dot_syfco_dot_syfco__pb2.ConvertTLSFToSpecResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
