"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Functionality:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _FunctionalityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Functionality.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    FUNCTIONALITY_OTHER: _Functionality.ValueType  # 0
    FUNCTIONALITY_LTL_AIGER_MODELCHECKING: _Functionality.ValueType  # 1
    FUNCTIONALITY_LTL_MEALY_MODELCHECKING: _Functionality.ValueType  # 2
    FUNCTIONALITY_LTL_AIGER_SYNTHESIS: _Functionality.ValueType  # 3
    FUNCTIONALITY_LTL_MEALY_SYNTHESIS: _Functionality.ValueType  # 4
    FUNCTIONALITY_LTL_EQUIVALENCE: _Functionality.ValueType  # 5
    FUNCTIONALITY_LTL_TRACE_MODELCHECKING: _Functionality.ValueType  # 6
    FUNCTIONALITY_RANDLTL: _Functionality.ValueType  # 7
    FUNCTIONALITY_AIGER_TO_MEALY: _Functionality.ValueType  # 8
    FUNCTIONALITY_MEALY_TO_AIGER: _Functionality.ValueType  # 9
    FUNCTIONALITY_TLSF_TO_SPEC: _Functionality.ValueType  # 10
    FUNCTIONALITY_NEURAL_LTL_AIGER_SYNTHESIS: _Functionality.ValueType  # 11

class Functionality(_Functionality, metaclass=_FunctionalityEnumTypeWrapper):
    """All available purposes of tools in ML2 / NeuroSynt
    Can easily be extended to more purposes without breaking backwards
    compatibility.
    """

FUNCTIONALITY_OTHER: Functionality.ValueType  # 0
FUNCTIONALITY_LTL_AIGER_MODELCHECKING: Functionality.ValueType  # 1
FUNCTIONALITY_LTL_MEALY_MODELCHECKING: Functionality.ValueType  # 2
FUNCTIONALITY_LTL_AIGER_SYNTHESIS: Functionality.ValueType  # 3
FUNCTIONALITY_LTL_MEALY_SYNTHESIS: Functionality.ValueType  # 4
FUNCTIONALITY_LTL_EQUIVALENCE: Functionality.ValueType  # 5
FUNCTIONALITY_LTL_TRACE_MODELCHECKING: Functionality.ValueType  # 6
FUNCTIONALITY_RANDLTL: Functionality.ValueType  # 7
FUNCTIONALITY_AIGER_TO_MEALY: Functionality.ValueType  # 8
FUNCTIONALITY_MEALY_TO_AIGER: Functionality.ValueType  # 9
FUNCTIONALITY_TLSF_TO_SPEC: Functionality.ValueType  # 10
FUNCTIONALITY_NEURAL_LTL_AIGER_SYNTHESIS: Functionality.ValueType  # 11
global___Functionality = Functionality

@typing_extensions.final
class SetupRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ParametersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    PARAMETERS_FIELD_NUMBER: builtins.int
    @property
    def parameters(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """Defines tool-specific parameters. As Map (Dict in Python).
        Typical examples are memory limits etc. Can be empty.
        """
    def __init__(
        self,
        *,
        parameters: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["parameters", b"parameters"]) -> None: ...

global___SetupRequest = SetupRequest

@typing_extensions.final
class SetupResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUCCESS_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    success: builtins.bool
    error: builtins.str
    """If success is false, this should contain further information."""
    def __init__(
        self,
        *,
        success: builtins.bool = ...,
        error: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["error", b"error", "success", b"success"]) -> None: ...

global___SetupResponse = SetupResponse

@typing_extensions.final
class IdentificationRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___IdentificationRequest = IdentificationRequest

@typing_extensions.final
class IdentificationResponse(google.protobuf.message.Message):
    """Announces itself bu giving the name of the tool and the version, running on
    the grpc server
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TOOL_FIELD_NUMBER: builtins.int
    FUNCTIONALITIES_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    tool: builtins.str
    """what tool is running on the grpc server"""
    @property
    def functionalities(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___Functionality.ValueType]:
        """the purpose of the grpc server. A grpc server can have multiple
        functionalities.
        """
    version: builtins.str
    """the version, the grpc server is currently running"""
    def __init__(
        self,
        *,
        tool: builtins.str = ...,
        functionalities: collections.abc.Iterable[global___Functionality.ValueType] | None = ...,
        version: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["functionalities", b"functionalities", "tool", b"tool", "version", b"version"]) -> None: ...

global___IdentificationResponse = IdentificationResponse
