# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ml2.grpc.abc_aiger import abc_aiger_pb2 as ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2
from ml2.grpc.tools import tools_pb2 as ml2_dot_grpc_dot_tools_dot_tools__pb2


class ABCAigerStub(object):
    """AIGER is a format, library and set of utilities for And-Inverter Graphs
    (AIGs).
    ABC is a software system for synthesis and verification of binary sequential
    logic circuits appearing in synchronous hardware designs. ABC combines
    scalable logic optimization based on And-Inverter Graphs (AIGs),
    optimal-delay DAG-based technology mapping for look-up tables and standard
    cells, and innovative algorithms for sequential synthesis and verification.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Setup = channel.unary_unary(
                '/ABCAiger/Setup',
                request_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupResponse.FromString,
                )
        self.Identify = channel.unary_unary(
                '/ABCAiger/Identify',
                request_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationResponse.FromString,
                )
        self.ConvertBinaryToAasci = channel.unary_unary(
                '/ABCAiger/ConvertBinaryToAasci',
                request_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertBinaryToAasciRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertBinaryToAasciResponse.FromString,
                )
        self.ConvertAasciToBinary = channel.unary_unary(
                '/ABCAiger/ConvertAasciToBinary',
                request_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAasciToBinaryRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAasciToBinaryResponse.FromString,
                )
        self.ConvertAigerToDot = channel.unary_unary(
                '/ABCAiger/ConvertAigerToDot',
                request_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAigerToDotRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAigerToDotResponse.FromString,
                )
        self.ConvertDotToSvg = channel.unary_unary(
                '/ABCAiger/ConvertDotToSvg',
                request_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotToSvgResponse.FromString,
                )
        self.ConvertDotToPng = channel.unary_unary(
                '/ABCAiger/ConvertDotToPng',
                request_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotToPngResponse.FromString,
                )
        self.AigerSimplify = channel.unary_unary(
                '/ABCAiger/AigerSimplify',
                request_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.AigerSimplifyRequest.SerializeToString,
                response_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.AigerSimplifyResponse.FromString,
                )


class ABCAigerServicer(object):
    """AIGER is a format, library and set of utilities for And-Inverter Graphs
    (AIGs).
    ABC is a software system for synthesis and verification of binary sequential
    logic circuits appearing in synchronous hardware designs. ABC combines
    scalable logic optimization based on And-Inverter Graphs (AIGs),
    optimal-delay DAG-based technology mapping for look-up tables and standard
    cells, and innovative algorithms for sequential synthesis and verification.
    """

    def Setup(self, request, context):
        """Setup call, which is typically called before the first model checking call
        has happened.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Identify(self, request, context):
        """Call to find out the identity and functionality of the server, i.e. the
        tool that is running the server and what it is supposed to do.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertBinaryToAasci(self, request, context):
        """Call to convert an AIGER circuit from binary to aasci format
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertAasciToBinary(self, request, context):
        """Call to convert an AIGER circuit from aasci to binary format
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertAigerToDot(self, request, context):
        """Call to convert an AIGER circuit to a dot format
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertDotToSvg(self, request, context):
        """Call to convert a dot string to a svg image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertDotToPng(self, request, context):
        """Call to convert a dot string to a png image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AigerSimplify(self, request, context):
        """Call to simplify an AIGER circuit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ABCAigerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Setup': grpc.unary_unary_rpc_method_handler(
                    servicer.Setup,
                    request_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupResponse.SerializeToString,
            ),
            'Identify': grpc.unary_unary_rpc_method_handler(
                    servicer.Identify,
                    request_deserializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationResponse.SerializeToString,
            ),
            'ConvertBinaryToAasci': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertBinaryToAasci,
                    request_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertBinaryToAasciRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertBinaryToAasciResponse.SerializeToString,
            ),
            'ConvertAasciToBinary': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertAasciToBinary,
                    request_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAasciToBinaryRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAasciToBinaryResponse.SerializeToString,
            ),
            'ConvertAigerToDot': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertAigerToDot,
                    request_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAigerToDotRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAigerToDotResponse.SerializeToString,
            ),
            'ConvertDotToSvg': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertDotToSvg,
                    request_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotToSvgResponse.SerializeToString,
            ),
            'ConvertDotToPng': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertDotToPng,
                    request_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotToPngResponse.SerializeToString,
            ),
            'AigerSimplify': grpc.unary_unary_rpc_method_handler(
                    servicer.AigerSimplify,
                    request_deserializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.AigerSimplifyRequest.FromString,
                    response_serializer=ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.AigerSimplifyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ABCAiger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ABCAiger(object):
    """AIGER is a format, library and set of utilities for And-Inverter Graphs
    (AIGs).
    ABC is a software system for synthesis and verification of binary sequential
    logic circuits appearing in synchronous hardware designs. ABC combines
    scalable logic optimization based on And-Inverter Graphs (AIGs),
    optimal-delay DAG-based technology mapping for look-up tables and standard
    cells, and innovative algorithms for sequential synthesis and verification.
    """

    @staticmethod
    def Setup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ABCAiger/Setup',
            ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupRequest.SerializeToString,
            ml2_dot_grpc_dot_tools_dot_tools__pb2.SetupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Identify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ABCAiger/Identify',
            ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationRequest.SerializeToString,
            ml2_dot_grpc_dot_tools_dot_tools__pb2.IdentificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertBinaryToAasci(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ABCAiger/ConvertBinaryToAasci',
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertBinaryToAasciRequest.SerializeToString,
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertBinaryToAasciResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertAasciToBinary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ABCAiger/ConvertAasciToBinary',
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAasciToBinaryRequest.SerializeToString,
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAasciToBinaryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertAigerToDot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ABCAiger/ConvertAigerToDot',
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAigerToDotRequest.SerializeToString,
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertAigerToDotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertDotToSvg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ABCAiger/ConvertDotToSvg',
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotRequest.SerializeToString,
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotToSvgResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertDotToPng(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ABCAiger/ConvertDotToPng',
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotRequest.SerializeToString,
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.ConvertDotToPngResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AigerSimplify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ABCAiger/AigerSimplify',
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.AigerSimplifyRequest.SerializeToString,
            ml2_dot_grpc_dot_abc__aiger_dot_abc__aiger__pb2.AigerSimplifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
